import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public record Hospede(
    String nome,
    LocalDate dataDeNascimento,
    String cpfPassaporteRne,
    String nacionalidade,
    String endereco,
    int numero,
    String complemento,
    String cep
) {
    public String dataDeNascimentoString() {
        return dataDeNascimento.format(lerDados.DATA);
    }

    public List<String> transformarEmLista() {
        return List.of(
            nome,
            dataDeNascimento.toString(),
            cpfPassaporteRne,
            nacionalidade,
            endereco,
            Integer.toString(numero),
            complemento,
            cep
        );
    }

    public static List<Hospede> lerDaLista(List<String> lista) {
        if (lista.size() % 8 != 0) throw new RuntimeException("Lista com erro");
        List<Hospede> resultado = new ArrayList<>();
        for (int i = 0; i < lista.size(); i += 8) {
            String nome = lista.get(i);
            LocalDate dataDeNascimento = LocalDate.parse(lista.get(i + 1));
            String cpfPassaporteRne = lista.get(i + 2);
            String nacionalidade = lista.get(i + 3);
            String endereco = lista.get(i + 4);
            int numero = Integer.parseInt(lista.get(i + 5));
            String complemento = lista.get(i + 6);
            String cep = lista.get(i + 7);

            Hospede novoHospede = new Hospede(nome, dataDeNascimento, cpfPassaporteRne, nacionalidade, endereco, numero, complemento, cep);
            resultado.add(novoHospede);
        }
        return resultado;
    }

    public static List<String> transformarEmStrings(List<Hospede> hospedes) {
        List<String> resultado = new ArrayList<>();
        for (var h : hospedes) {
            var listinha = h.transformarEmLista();
            resultado.addAll(listinha);
        }
        return resultado;
    }

    public static void salvarHospedesEmArquivo(List<Hospede> hospedes) {
        if (!Arquivo.arquivoExiste("Hospede.txt")) {
            try {
                Files.createFile(Path.of("Hospede.txt"));
            } catch (IOException e) {
                throw new RuntimeException("Erro ao criar o arquivo Hospede.txt", e);
            }
        }

        List<String> linhas = transformarEmStrings(hospedes);
        Arquivo.escreverLinhas(linhas, "Hospede.txt");
    }

    public static List<Hospede> carregarHospedesDoArquivo() {
        List<String> linhas = Arquivo.lerLinhas("Hospede.txt");
        return lerDaLista(linhas);
    }
}
